name: Battle of the Dragons Revived

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - ".github/workflows/botdr.yml"
      - "battle_of_the_dragons_revived/**"
  pull_request:
    branches:
      - main
    paths:
      - ".github/workflows/botdr.yml"
      - "battle_of_the_dragons_revived/**"

permissions:
  id-token: write
  contents: read

env:
  repo_path: "battle_of_the_dragons_revived"
  node_version: "20.x"
  python_version: "3.12"
  terraform_version: "1.9.8"

jobs:
  security-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.python_version }}
      - name: Set Up Checkov
        run: pip install checkov
      - name: Run Checkov
        run: checkov -d ${{ env.repo_path }} --quiet

  cost-estimation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set Up Infracost
        uses: infracost/actions/setup@v3
        with:
          api-key: ${{ secrets.INFRACOST_API_TOKEN }}
      - name: Run Infracost
        run: infracost breakdown --path ${{ env.repo_path }}

  build-and-test-yarn:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.node_version }}
      - name: Install Yarn
        run: npm install -g yarn
      - name: Build Env Bundle
        run: yarn install
        working-directory: "${{ env.repo_path }}/web"
      - name: Run Unit Tests
        run: yarn test --detectOpenHandles
        working-directory: "${{ env.repo_path }}/web"
      - name: Run Yarn Build
        run: yarn build
        working-directory: "${{ env.repo_path }}/web"

  terraform-plan:
    runs-on: ubuntu-latest
    env:
      TF_WORKSPACE: "dev-botdr"
      TF_VAR_env: "dev"
      TF_STATE_BUCKET_NAME: "cloud-infra-projects-tf-state"
      TF_STATE_BUCKET_REGION: "us-east-1"
      TF_STATE_BUCKET_KEY: "dev/botdr/terraform.tfstate"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup OIDC AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          role-session-name: GitHubActions-botdr-${{ github.sha }}
          aws-region: us-east-1
      - name: Set Up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.terraform_version }}
      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET_NAME }}" \
            -backend-config="region=${{ env.TF_STATE_BUCKET_REGION }}" \
            -backend-config="key=${{ env.TF_STATE_BUCKET_KEY }}"
        working-directory: "${{ env.repo_path }}/infra"
      - name: Terraform Validate
        run: terraform validate
        working-directory: "${{ env.repo_path }}/infra"
      - name: Terraform Plan
        run: terraform plan
        working-directory: "${{ env.repo_path }}/infra"

  docker-build-push:
    runs-on: ubuntu-latest
    concurrency:
      group: dev-botdr-docker-push
    env:
      APP_NAME: "dev-botdr"
      DOCKER_REGISTRY: "registry.fly.io"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set Up Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Set Up Docker
        uses: docker/setup-buildx-action@v3
      - name: Log Into Fly.io Docker Registry
        run: |
          flyctl auth docker --access-token ${{ secrets.FLY_IO_API_TOKEN }}
          docker info
      - name: Build and Push Docker Image
        run: |
          docker buildx build \
            --push \
            --tag "${{ env.DOCKER_REGISTRY }}/${{ env.APP_NAME }}:${{ github.sha }}" \
            .
        working-directory: "${{ env.repo_path }}/app"

  deploy:
    runs-on: ubuntu-latest
    needs:
      - security-analysis
      - cost-estimation
      - build-and-test-yarn
      - terraform-plan
      - docker-build-push
    concurrency:
      group: dev-botdr
    environment:
      name: DEV
    env:
      TF_WORKSPACE: "dev-botdr"
      TF_VAR_env: "dev"
      TF_STATE_BUCKET_NAME: "cloud-infra-projects-tf-state"
      TF_STATE_BUCKET_REGION: "us-east-1"
      TF_STATE_BUCKET_KEY: "dev/botdr/terraform.tfstate"
      AWS_S3_CF_BUCKET_ID: "dev-botdr-primary-site-web-bucket"
      AWS_S3_MOD_BUCKET_ID: "dev-botdr-mod-bucket"
      FLY_IO_API_TOKEN: ${{ secrets.FLY_IO_API_TOKEN }}
      FLY_IO_APP_NAME: "dev-botdr"
      FLY_IO_APP_REGION: "iad"
      FLY_IO_APP_AWS_REGION: "us-east-1"
      FLY_IO_APP_AWS_ACCESS_KEY_ID: ${{ secrets.FLY_IO_APP_AWS_ACCESS_KEY_ID }}
      FLY_IO_APP_AWS_SECRET_ACCESS_KEY: ${{ secrets.FLY_IO_APP_AWS_SECRET_ACCESS_KEY }}
      FLY_IO_ORG: "cloud-infra-projects"
      FLY_IO_KILL_SIGNAL: "SIGTERM"
      FLY_IO_KILL_TIMEOUT: "300"
      FLY_IO_VOLUME_INIT_SIZE: "10"
      FLY_IO_VOLUMES: "/nwn/home"
      FLY_API_TOKEN: ${{ secrets.FLY_IO_API_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup OIDC AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          role-session-name: GitHubActions-botdr-${{ github.sha }}
          aws-region: us-east-1
      - name: Set Up Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.python_version }}
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.node_version }}
      - name: Install Yarn
        run: npm install -g yarn
      - name: Build Env Bundle
        run: yarn install
        working-directory: "${{ env.repo_path }}/web"
      - name: Run Yarn Build
        run: yarn build
        working-directory: "${{ env.repo_path }}/web"
      - name: Set Up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.terraform_version }}
      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET_NAME }}" \
            -backend-config="region=${{ env.TF_STATE_BUCKET_REGION }}" \
            -backend-config="key=${{ env.TF_STATE_BUCKET_KEY }}"
        working-directory: "${{ env.repo_path }}/infra"
      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: "${{ env.repo_path }}/infra"
      - name: Install CI/CD Dependencies
        run: pip3 install -r requirements.txt
        working-directory: "${{ env.repo_path }}/deploy"
      - name: Run Fly.io Deployment
        run: python3 deploy_fly_app.py
        working-directory: "${{ env.repo_path }}/deploy"
