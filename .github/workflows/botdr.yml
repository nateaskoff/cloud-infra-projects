name: Battle of the Dragons Revived

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  repo_path: "battle_of_the_dragons_revived"
  node_version: "20.x"
  python_version: "3.12"
  terraform_version: "1.9.8"

jobs:
  fly-io-check:
    runs-on: ubuntu-latest
    steps:
      - name: Set Up Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Test Fly.io Connection
        run: flyctl orgs list
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_IO_API_TOKEN }}

  security-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.python_version }}
      - name: Set Up Checkov
        run: pip install checkov
      - name: Run Checkov
        run: checkov -d ${{ env.repo_path }} --quiet

  cost-estimation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set Up Infracost
        uses: infracost/actions/setup@v3
        with:
          api-key: ${{ secrets.INFRACOST_API_TOKEN }}
      - name: Run Infracost
        run: infracost breakdown --path ${{ env.repo_path }}

  build-and-test-yarn:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.node_version }}
      - name: Install Yarn
        run: npm install -g yarn
      - name: Build Env Bundle
        run: yarn install
        working-directory: "${{ env.repo_path }}/web"
      - name: Run Unit Tests
        run: yarn test --detectOpenHandles
        working-directory: "${{ env.repo_path }}/web"
      - name: Run Yarn Build
        run: yarn build
        working-directory: "${{ env.repo_path }}/web"

  terraform-plan:
    runs-on: ubuntu-latest
    env:
      TF_WORKSPACE: "dev-botdr"
      TF_VAR_env: "dev"
      TF_STATE_BUCKET_NAME: "cloud-infra-projects-tf-state"
      TF_STATE_BUCKET_REGION: "us-east-1"
      TF_STATE_BUCKET_KEY: "dev/botdr/terraform.tfstate"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup OIDC AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          role-session-name: GitHubActions-botdr-${{ github.sha }}
          aws-region: us-east-1
      - name: Set Up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.terraform_version }}
      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET_NAME }}" \
            -backend-config="region=${{ env.TF_STATE_BUCKET_REGION }}" \
            -backend-config="key=${{ env.TF_STATE_BUCKET_KEY }}"
        working-directory: "${{ env.repo_path }}/infra"
      - name: Terraform Validate
        run: terraform validate
        working-directory: "${{ env.repo_path }}/infra"
      - name: Terraform Plan
        run: terraform plan
        working-directory: "${{ env.repo_path }}/infra"

  deploy:
    runs-on: ubuntu-latest
    needs:
      - fly-io-check
      - security-analysis
      - cost-estimation
      - build-and-test-yarn
      - terraform-plan
    concurrency:
      group: dev-botdr
    environment:
      name: DEV
    env:
      TF_WORKSPACE: "dev-botdr"
      TF_VAR_env: "dev"
      TF_STATE_BUCKET_NAME: "cloud-infra-projects-tf-state"
      TF_STATE_BUCKET_REGION: "us-east-1"
      TF_STATE_BUCKET_KEY: "dev/botdr/terraform.tfstate"
      AWS_S3_CF_BUCKET_ID: "dev-botdr-primary-site-web-bucket"
      FLY_IO_API_TOKEN: ${{ secrets.FLY_IO_API_TOKEN }}
      FLY_IO_APP_NAME: "dev-botdr"
      FLY_IO_APP_REGION: "iad"
      FLY_IO_ORG: "cloud-infra-projects"
      FLY_IO_PORT: "5121"
      FLY_IO_KILL_SIGNAL: "SIGTERM"
      FLY_IO_KILL_TIMEOUT: "300"
      FLY_IO_CPUS_KIND: "shared"
      FLY_IO_CPUS: "0.25"
      FLY_IO_MEMORY: "128"
      FLY_IO_DOCKERFILE_PATH: "Dockerfile"
      FLY_IO_VOLUME_INIT_SIZE: "10"
      FLY_IO_VOLUMES: "/nwn/home"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup OIDC AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          role-session-name: GitHubActions-botdr-${{ github.sha }}
          aws-region: us-east-1
      - name: Set Up Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Test Fly.io Connection
        run: flyctl orgs list
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_IO_API_TOKEN }}
      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.python_version }}
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.node_version }}
      - name: Install Yarn
        run: npm install -g yarn
      - name: Build Env Bundle
        run: yarn install
        working-directory: "${{ env.repo_path }}/web"
      - name: Run Yarn Build
        run: yarn build
        working-directory: "${{ env.repo_path }}/web"
      - name: Install Dependencies
        run: pip install -r requirements.txt
        working-directory: "${{ env.repo_path }}/app"
      - name: Deploy Fly.io App
        run: |
          # Check if the app exists
          FLY_APP_EXISTS=$(flyctl apps list | grep ${{ env.FLY_IO_APP_NAME }} | wc -l)

          # If the app does not exist, create it
          if [ $FLY_APP_EXISTS -eq 0 ]; then
            flyctl apps create ${{ env.FLY_IO_APP_NAME }}
          fi
        working-directory: "${{ env.repo_path }}/app"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_IO_API_TOKEN }}
      - name: Deploy Fly.io Config
        run: |
          flyctl deploy ${{ env.repo_path }}/app \
            --app ${{ env.FLY_IO_APP_NAME }} \
            --regions ${{ env.FLY_IO_APP_REGION }} \
            --vm-cpus-kind ${{ env.FLY_IO_CPUS_KIND }} \
            --vm-cpus ${{ env.FLY_IO_CPUS }} \
            --vm-memory ${{ env.FLY_IO_MEMORY }} \
            --dockerfile ${{ env.FLY_IO_DOCKERFILE_PATH }} \
            --volume-initial-size ${{ env.FLY_IO_VOLUME_INIT_SIZE }} \
            --volume ${{ env.FLY_IO_VOLUMES }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_IO_API_TOKEN }}
      - name: Set Up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.terraform_version }}
      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET_NAME }}" \
            -backend-config="region=${{ env.TF_STATE_BUCKET_REGION }}" \
            -backend-config="key=${{ env.TF_STATE_BUCKET_KEY }}"
        working-directory: "${{ env.repo_path }}/infra"
      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: "${{ env.repo_path }}/infra"
